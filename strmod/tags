!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(prom)	Makefile	/^$(prom): $(obj)$/;"	t
%.o	Makefile	/^%.o: %.cpp $(deps)$/;"	t
ArSize	sayings2.cpp	/^const int ArSize = 10;$/;"	v	typeref:typename:const int
CINLIM	string1.h	/^	static const int CINLIM = 80;$/;"	m	class:String	typeref:typename:const int
HowMany	string1.cpp	/^int String::HowMany()$/;"	f	class:String	typeref:typename:int
MaxLen	sayings2.cpp	/^const int MaxLen = 81;$/;"	v	typeref:typename:const int
STRING1_H_	string1.h	/^#define STRING1_H_$/;"	d
String	string1.cpp	/^String::String()$/;"	f	class:String
String	string1.cpp	/^String::String(const String &st)$/;"	f	class:String
String	string1.cpp	/^String::String(const char *s)$/;"	f	class:String
String	string1.h	/^class String$/;"	c
__anon769eab9e0102	string1.cpp	/^{$/;"	f	file:
cc	Makefile	/^cc = g++$/;"	m
clean	Makefile	/^clean:$/;"	t
deps	Makefile	/^deps = $(shell find .\/ -name "*.h")$/;"	m
len	string1.h	/^	int len;$/;"	m	class:String	typeref:typename:int
length	string1.h	/^	int length() const {return len;}$/;"	f	class:String	typeref:typename:int
main	sayings2.cpp	/^int main()$/;"	f	typeref:typename:int
num_strings	string1.cpp	/^int String::num_strings = 0;$/;"	m	class:String	typeref:typename:int
num_strings	string1.h	/^	static int num_strings;$/;"	m	class:String	typeref:typename:int
obj	Makefile	/^obj = $(src:%.cpp=%.o) $/;"	m
operator <<	string1.cpp	/^ostream &operator<<(ostream &os, const String &st)$/;"	f	typeref:typename:ostream &
operator =	string1.cpp	/^String & String::operator=(const char *s)$/;"	f	class:String	typeref:typename:String &
operator =	string1.cpp	/^String &String::operator=(const String &st)$/;"	f	class:String	typeref:typename:String &
operator >	string1.cpp	/^bool operator>(const String &st1, const String &st2)$/;"	f	typeref:typename:bool
operator >>	string1.cpp	/^istream &operator>>(istream &is, String &st)$/;"	f	typeref:typename:istream &
operator []	string1.cpp	/^char &String::operator[](int i)$/;"	f	class:String	typeref:typename:char &
src	Makefile	/^src = $(shell find .\/ -name "*.cpp")$/;"	m
str	string1.h	/^	char *str;$/;"	m	class:String	typeref:typename:char *
~String	string1.cpp	/^String::~String()$/;"	f	class:String
